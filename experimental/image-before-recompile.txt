Array +
#(32 129 144 112 245 33 129 145 113 245 32 129 146 48 49 178 130 147 114 245 81 48 195 33 50 51 32 51 130 148 131 149 242 131 150 245 81 49 195 51 50 48 51 178 33 51 130 151 131 152 242 131 153 245 50 242 245 241 )
#(size size class new: at: at:put: to:do: at: at:put: to:do: )
Array add:
#(33 32 210 31 242 245 241 )
#()
Array asString
#(32 64 192 10 48 49 178 65 178 242 131 146 242 245 241 )
#(   inject:into: )
Array asStringArray
#(32 192 7 48 129 144 242 130 145 129 146 242 245 241 )
#(printString collect: asArray )
Array asTextArray
#(64 209 18 245 65 32 129 146 130 147 112 245 81 32 129 148 193 29 48 49 32 49 130 149 129 150 131 151 242 131 152 245 48 242 245 241 )
#(THIS SHOULD NOT BE CALLED (asTextArray) Array size new: size at: printString at:put: to:do: )
Array at:ifAbsent:
#(32 33 130 144 248 13 32 33 210 30 242 246 17 34 129 145 242 245 241 )
#(includesKey: value )
Array at:put:
#(32 33 130 144 248 13 34 32 33 211 5 246 30 32 65 32 129 146 129 147 178 68 178 33 129 149 178 130 150 242 245 241 )
#(includesKey: array indexing error  size printString   printString error: )
Array copy
#(32 129 144 242 245 241 )
#(asArray )
Array from:size:
#(32 33 33 34 178 81 130 144 131 145 242 245 241 )
#(- from:to: )
Array from:to:
#(33 80 130 144 112 245 34 32 129 145 130 146 81 178 48 130 147 80 130 148 113 245 32 129 149 49 130 150 114 245 81 49 195 48 50 51 32 48 130 151 131 152 245 48 81 178 112 242 131 153 245 50 242 245 241 )
#(max: size min: - max: class new: at: at:put: to:do: )
Array printString
#(64 32 129 251 1 178 242 245 241 )
#(# printString )
Array removeAt:
#(33 81 32 129 144 131 145 247 13 32 242 246 14 90 245 66 32 129 147 81 130 148 130 149 112 245 81 33 81 130 150 130 151 193 44 48 49 32 49 130 152 131 153 242 130 154 245 33 81 178 32 129 155 130 156 193 69 48 49 81 130 157 32 49 130 158 131 159 242 130 9 16 245 48 242 245 241 )
#(size between:and: Array size - new: - to: at: at:put: do: size to: - at: at:put: do: )
Array size
#(32 209 4 242 245 241 )
#()
Array with:
#(64 65 129 146 129 147 178 209 18 245 33 32 210 31 242 245 241 )
#(WITH SHOULD NOT BE USED ANY MORE Context current backtrace )
Block fork
#(32 209 19 245 241 )
#()
Block value
#(32 209 8 245 241 )
#()
Block value:
#(33 32 210 8 245 241 )
#()
Block value:value:
#(33 34 32 211 8 245 241 )
#()
Block whileFalse:
#(32 129 144 247 16 33 129 145 245 32 33 130 146 242 246 17 90 245 241 )
#(value value whileFalse: )
Block whileTrue:
#(32 129 144 248 16 33 129 145 245 32 33 130 146 242 246 17 90 245 241 )
#(value value whileTrue: )
Boolean and:
#(32 248 8 33 129 144 246 9 92 242 245 241 )
#(value )
Boolean ifFalse:
#(32 248 6 90 246 9 33 129 144 242 245 241 )
#(value )
Boolean ifFalse:ifTrue:
#(32 248 8 34 129 144 246 11 33 129 145 242 245 241 )
#(value value )
Boolean ifTrue:
#(32 248 8 33 129 144 246 9 90 242 245 241 )
#(value )
Boolean not
#(32 248 6 92 246 7 91 242 245 241 )
#()
Boolean or:
#(32 248 6 91 246 9 33 129 144 242 245 241 )
#(value )
ByteArray asCode
#(64 112 245 32 193 23 48 49 65 130 146 178 67 178 49 68 130 149 178 70 178 112 242 130 151 245 48 72 178 242 245 241 )
#(( 16 quo: : 16 rem:   do: ) )
ByteArray at:ifAbsent:
#(32 33 130 144 248 13 32 33 210 21 242 246 17 34 129 145 242 245 241 )
#(includesKey: value )
ByteArray at:put:
#(32 33 130 144 248 26 34 80 65 131 146 248 20 34 32 33 211 22 246 24 32 67 130 148 246 30 32 69 130 150 245 241 )
#(includesKey: 255 between:and: illegal insertion into byte array error: byte array indexing error error: )
Char <
#(16 33 129 144 176 242 245 241 )
#(value )
Char =
#(16 33 129 144 130 145 242 245 241 )
#(value = )
Char asString
#(64 81 130 145 112 245 48 81 32 131 146 245 48 242 245 241 )
#(String new: at:put: )
Char isAlphabetic
#(32 129 144 247 10 32 129 145 246 11 91 242 245 241 )
#(isLowerCase isUpperCase )
Char isAlphanumeric
#(32 129 144 247 10 32 129 145 246 11 91 242 245 241 )
#(isAlphabetic isDigit )
Char isBlank
#(16 64 130 145 247 21 16 89 130 146 247 18 16 67 130 148 246 19 91 246 22 91 242 245 241 )
#(32 = = 10 = )
Char isDigit
#(32 64 65 131 146 242 245 241 )
#($0 $9 between:and: )
Char isLowerCase
#(32 64 65 131 146 242 245 241 )
#($a $z between:and: )
Char isUpperCase
#(32 64 65 131 146 242 245 241 )
#($A $Z between:and: )
Char lowerCase
#(32 129 144 248 17 65 16 66 130 147 68 178 130 149 242 246 18 90 245 241 )
#(isUpperCase Char 65 - 97 new: )
Char printString
#(64 82 130 145 112 245 48 81 66 131 147 245 48 82 32 131 148 245 48 242 245 241 )
#(String new: $$ at:put: at:put: )
Char upperCase
#(32 129 144 248 17 65 16 66 130 147 68 178 130 149 242 246 18 90 245 241 )
#(isLowerCase Char 97 - 65 new: )
Char value
#(16 242 245 241 )
#()
Class addClassVariable:
#(64 32 90 131 145 245 66 32 129 147 85 32 129 148 129 149 33 130 150 132 151 245 19 81 178 99 245 241 )
#(Object in:add: Object class class variables add: in:at:put: )
Class addInstanceVariable:
#(20 33 130 144 100 245 19 81 178 99 245 241 )
#(add: )
Class allMethods
#(17 160 248 9 18 129 144 246 17 18 129 145 17 129 146 130 147 242 245 241 )
#(asList asList allMethods addAll: )
Class compileMethod:
#(32 33 130 144 112 245 48 161 248 44 18 193 22 49 129 145 48 129 146 130 147 242 130 148 48 130 149 194 37 50 129 150 51 129 151 176 242 130 152 129 153 98 246 48 32 74 130 155 245 91 242 245 241 )
#(parseMethod: name name ~= select: add: name name asOrdered: asArray cannot compile method error: )
Class hierarchy
#(32 80 130 144 242 245 241 )
#(hierarchy: )
Class hierarchy:
#(64 112 245 81 33 193 12 48 65 178 112 242 131 146 245 48 16 178 112 245 32 129 147 193 41 48 68 129 149 129 150 178 49 33 81 178 130 151 178 112 242 130 152 245 48 242 245 241 )
#(     to:do: subclasses Char newline asString hierarchy: do: )
Class instanceVariables
#(17 161 248 10 17 129 144 112 246 15 65 80 130 146 112 245 20 161 248 26 48 20 178 112 246 27 90 245 48 242 245 241 )
#(instanceVariables Array new: )
Class methodIncludesText:
#(64 112 245 18 193 35 49 129 145 33 130 146 161 248 33 48 67 129 148 129 149 178 16 178 70 178 49 129 151 178 112 246 34 90 242 130 152 245 48 242 245 241 )
#( text find: Char newline asString : name do: )
Class methods
#(18 242 245 241 )
#()
Class name
#(16 242 245 241 )
#()
Class name:
#(33 96 245 241 )
#()
Class name:parent:variables:
#(33 96 245 34 97 245 35 129 144 100 245 65 80 130 146 98 245 34 129 147 35 129 148 178 99 245 241 )
#(break Array new: size size )
Class new
#(32 19 210 7 242 245 241 )
#()
Class parseMethod:
#(64 129 145 33 32 129 146 32 129 147 129 148 132 149 32 130 150 242 245 241 )
#(Class parser instanceVariables class variables text:instanceVars:classVars: parse: )
Class printString
#(16 129 144 242 245 241 )
#(printString )
Class removeMethod:
#(18 192 10 48 129 144 33 130 145 242 130 146 129 147 98 245 241 )
#(name ~= select: asArray )
Class saveImage:
#(33 129 144 209 29 245 65 33 178 242 245 241 )
#(printString Image saved in file  )
Class size
#(19 242 245 241 )
#()
Class subclass:variables:classVariables:
#(64 129 145 66 33 129 147 178 32 129 148 35 132 149 112 245 48 129 150 33 32 34 132 151 242 245 241 )
#(Class new Meta printString class name:parent:variables: new name:parent:variables: )
Class subclasses
#(64 129 145 192 12 48 129 146 32 130 147 242 130 148 242 245 241 )
#(Class classes superclass = select: )
Class superclass
#(17 242 245 241 )
#()
Class variables
#(20 242 245 241 )
#()
Collection addAll:
#(33 192 8 32 48 130 144 242 130 145 245 241 )
#(add: do: )
Collection asArray
#(64 32 129 145 130 146 112 245 81 113 245 32 194 25 48 49 50 131 147 245 49 81 178 113 242 130 148 245 48 242 245 241 )
#(Array size new: at:put: do: )
Collection asByteArray
#(64 32 129 145 130 146 112 245 81 113 245 32 194 25 48 49 50 131 147 245 49 81 178 113 242 130 148 245 48 242 245 241 )
#(ByteArray size new: at:put: do: )
Collection asList
#(64 129 145 32 130 146 242 245 241 )
#(List new addAll: )
Collection asOrdered
#(64 129 145 32 130 146 242 245 241 )
#(Ordered new addAll: )
Collection asOrdered:
#(64 33 130 145 32 130 146 242 245 241 )
#(Ordered new: addAll: )
Collection asString
#(64 32 129 145 130 146 112 245 81 113 245 32 194 25 48 49 50 131 147 245 49 81 178 113 242 130 148 245 48 242 245 241 )
#(String size new: at:put: do: )
Collection collect:
#(32 64 129 145 192 14 48 33 49 130 146 130 147 242 131 148 242 245 241 )
#(List new value: add: inject:into: )
Collection find:ifAbsent:
#(32 192 15 33 48 130 144 248 13 48 243 246 14 90 242 130 145 245 34 129 146 242 245 241 )
#(value: do: value )
Collection includes:
#(32 192 15 48 33 130 144 248 13 91 243 246 14 90 242 130 145 245 92 242 245 241 )
#(= do: )
Collection includesTest:
#(32 192 15 33 48 130 144 248 13 91 243 246 14 90 242 130 145 245 92 242 245 241 )
#(value: do: )
Collection inject:into:
#(33 112 245 32 193 13 34 48 49 131 144 112 242 130 145 245 48 242 245 241 )
#(value:value: do: )
Collection isEmpty
#(32 129 144 80 130 145 242 245 241 )
#(size = )
Collection printString
#(32 64 192 10 48 49 178 65 178 242 131 146 67 178 242 245 241 )
#((   inject:into: ) )
Collection reject:
#(32 192 10 33 48 130 144 129 145 242 130 146 242 245 241 )
#(value: not select: )
Collection select:
#(32 64 129 145 192 22 33 49 130 146 248 18 48 49 130 147 246 19 90 245 48 242 131 148 242 245 241 )
#(List new value: add: inject:into: )
Collection size
#(32 80 192 8 48 81 178 242 131 144 242 245 241 )
#(inject:into: )
Context backtrace
#(16 129 144 17 65 192 17 48 49 129 146 129 147 178 68 178 242 131 149 178 70 178 71 129 152 129 153 178 22 161 248 37 22 129 154 246 38 75 178 242 245 241 )
#(name [ class printString , inject:into: ] Char newline asString backtrace   )
Context method:arguments:
#(33 96 245 34 97 245 64 33 129 145 130 146 98 245 80 100 245 67 16 129 148 130 149 99 245 80 101 245 241 )
#(Array tempSize new: Array stackSize new: )
Context perform:withArguments:
#(33 96 245 34 97 245 64 33 129 145 130 146 98 245 80 100 245 67 16 129 148 130 149 99 245 80 101 245 32 209 6 242 245 241 )
#(Array tempSize new: Array stackSize new: )
False and:
#(92 242 245 241 )
#()
False ifTrue:ifFalse:
#(34 129 144 242 245 241 )
#(value )
False not
#(91 242 245 241 )
#()
False or:
#(33 129 144 242 245 241 )
#(value )
False printString
#(64 242 245 241 )
#(false )
Float *
#(33 32 130 144 242 245 241 )
#(multByFloat: )
Float +
#(33 32 130 144 242 245 241 )
#(addToFloat: )
Float -
#(33 32 130 144 242 245 241 )
#(subtractFromFloat: )
Float /
#(33 32 130 144 242 245 241 )
#(divideByFloat: )
Float <
#(33 129 144 32 130 145 242 245 241 )
#(asFloat lessThanFloat: )
Float =
#(33 129 144 32 130 145 242 245 241 )
#(asFloat equalToFloat: )
Float addToFloat:
#(64 33 32 211 51 242 245 241 )
#(Float )
Float asFloat
#(32 242 245 241 )
#()
Float asInteger
#(32 209 57 242 245 241 )
#()
Float divideByFloat:
#(64 32 33 211 54 242 245 241 )
#(Float )
Float equalToFloat:
#(32 33 210 56 242 245 241 )
#()
Float lessThanFloat:
#(32 33 210 55 242 245 241 )
#()
Float lessThanSmallInt:
#(33 129 144 32 176 242 245 241 )
#(asFloat )
Float multByFloat:
#(64 32 33 211 53 242 245 241 )
#(Float )
Float printString
#(64 32 210 59 242 245 241 )
#(String )
Float subtractFromFloat:
#(64 32 33 211 52 242 245 241 )
#(Float )
Fraction *
#(33 32 130 144 242 245 241 )
#(multByFraction: )
Fraction +
#(33 32 130 144 242 245 241 )
#(addToFraction: )
Fraction -
#(33 32 130 144 242 245 241 )
#(subtractFromFraction: )
Fraction /
#(33 32 130 144 242 245 241 )
#(divideByFraction: )
Fraction addToFraction:
#(64 16 33 129 145 130 146 17 33 129 147 130 148 178 17 33 129 149 130 150 131 151 242 245 241 )
#(Fraction bottom * top * bottom * top:bottom: )
Fraction addToSmallInt:
#(64 33 130 145 32 178 242 245 241 )
#(Fraction top: )
Fraction asFloat
#(16 129 144 17 129 145 130 146 242 245 241 )
#(asFloat asFloat / )
Fraction bottom
#(17 242 245 241 )
#()
Fraction divideByFraction:
#(64 33 129 145 17 130 146 33 129 147 16 130 148 131 149 242 245 241 )
#(Fraction top * bottom * top:bottom: )
Fraction divideBySmallInt:
#(64 33 130 145 32 130 146 242 245 241 )
#(Fraction top: / )
Fraction multByFraction:
#(64 16 33 129 145 130 146 17 33 129 147 130 148 131 149 242 245 241 )
#(Fraction top * bottom * top:bottom: )
Fraction multBySmallInt:
#(64 33 130 145 32 130 146 242 245 241 )
#(Fraction top: * )
Fraction printString
#(64 16 129 145 178 66 178 17 129 147 178 68 178 242 245 241 )
#(( printString / printString ) )
Fraction subtractFromFraction:
#(64 33 129 145 17 130 146 16 33 129 147 130 148 130 149 17 33 129 150 130 151 131 152 242 245 241 )
#(Fraction top * bottom * - bottom * top:bottom: )
Fraction subtractFromSmallInt:
#(64 33 130 145 32 130 146 242 245 241 )
#(Fraction top: - )
Fraction top
#(16 242 245 241 )
#()
Indexed at:
#(32 33 192 9 32 64 130 145 242 131 146 242 245 241 )
#(out of range index error: at:ifAbsent: )
Indexed do:
#(81 32 129 144 192 14 33 32 48 130 145 130 146 242 131 147 242 245 241 )
#(size at: value: to:do: )
Indexed includesKey:
#(33 81 32 129 144 131 145 242 245 241 )
#(size between:and: )
Indexed indexOf:ifAbsent:
#(81 32 129 144 192 21 33 32 48 130 145 130 146 248 19 48 243 246 20 90 242 131 147 245 34 129 148 242 245 241 )
#(size at: = to:do: value )
Indexed reverseDo:
#(81 32 129 144 130 145 192 16 33 32 48 130 146 130 147 242 130 148 242 245 241 )
#(size to: at: value: reverseDo: )
Indexed with:pad:do:
#(81 32 129 144 112 33 129 145 113 130 146 194 41 35 50 48 177 248 25 32 50 130 147 246 26 34 50 49 177 248 37 33 50 130 148 246 38 34 131 149 242 131 150 245 241 )
#(size size max: at: at: value:value: to:do: )
Integer /
#(33 32 130 144 242 245 241 )
#(divideByInteger: )
Integer @
#(64 129 145 32 33 131 146 242 245 241 )
#(Point new x:y: )
Integer addToFraction:
#(33 64 32 130 145 178 242 245 241 )
#(Fraction top: )
Integer addToSmallInt:
#(33 129 144 32 178 242 245 241 )
#(asLargeInteger )
Integer asInteger
#(32 242 245 241 )
#()
Integer divideByFraction:
#(33 64 32 130 145 130 146 242 245 241 )
#(Fraction top: / )
Integer divideByInteger:
#(64 33 32 131 145 242 245 241 )
#(Fraction top:bottom: )
Integer equalToSmallInt:
#(33 129 144 32 130 145 242 245 241 )
#(asLargeInteger = )
Integer gcd:
#(32 112 245 33 113 245 48 80 177 247 16 49 80 177 246 17 91 248 23 81 242 246 24 90 245 48 49 130 144 247 51 48 49 176 248 43 49 48 130 145 113 246 48 48 49 130 146 112 245 246 25 90 245 48 242 245 241 )
#(= - - )
Integer lessThanSmallInt:
#(33 129 144 32 176 242 245 241 )
#(asLargeInteger )
Integer multByFraction:
#(33 64 32 130 145 130 146 242 245 241 )
#(Fraction top: * )
Integer random
#(64 129 145 32 130 146 129 147 242 245 241 )
#(Float random * asInteger )
Integer subtractFromFraction:
#(33 64 32 130 145 130 146 242 245 241 )
#(Fraction top: - )
Integer subtractFromSmallInt:
#(33 129 144 32 130 145 242 245 241 )
#(asLargeInteger - )
Interval do:
#(16 112 245 48 17 177 248 20 33 48 130 144 245 48 18 178 112 245 246 3 90 245 241 )
#(value: )
Interval reverseDo:
#(17 112 245 48 16 130 144 248 22 33 48 130 145 245 48 18 130 146 112 245 246 3 90 245 241 )
#(>= value: - )
LargeNegative *
#(32 129 144 33 130 145 129 146 242 245 241 )
#(negated * negated )
LargeNegative +
#(33 32 129 144 130 145 242 245 241 )
#(negated - )
LargeNegative -
#(32 129 144 33 178 129 145 242 245 241 )
#(negated negated )
LargeNegative <
#(32 129 144 33 129 145 176 129 146 242 245 241 )
#(negated negated not )
LargeNegative =
#(32 129 144 33 129 145 130 146 242 245 241 )
#(negated negated = )
LargeNegative addToLP:
#(33 32 129 144 130 145 242 245 241 )
#(negated - )
LargeNegative asFloat
#(32 129 144 129 145 129 146 242 245 241 )
#(negated asFloat negated )
LargeNegative compareToLP:
#(64 242 245 241 )
#(-1 )
LargeNegative multByLP:
#(32 129 144 33 130 145 129 146 242 245 241 )
#(negated multByLP: negated )
LargeNegative multBySmallInt:
#(32 129 144 33 130 145 129 146 242 245 241 )
#(negated multBySmallInt: negated )
LargeNegative negated
#(64 16 130 145 242 245 241 )
#(LargePositive new: )
LargeNegative printString
#(64 32 129 145 129 146 178 242 245 241 )
#(- negated printString )
LargeNegative subtractFromLP:
#(33 32 129 144 178 242 245 241 )
#(negated )
LargePositive *
#(33 32 130 144 242 245 241 )
#(multByLP: )
LargePositive +
#(33 32 130 144 242 245 241 )
#(addToLP: )
LargePositive -
#(32 33 176 248 13 33 32 130 144 129 145 246 17 33 32 130 146 242 245 241 )
#(- negated subtractFromLP: )
LargePositive <
#(80 33 32 130 144 176 242 245 241 )
#(compareToLP: )
LargePositive =
#(80 33 32 130 144 130 145 242 245 241 )
#(compareToLP: = )
LargePositive addToLP:
#(80 112 245 64 129 145 114 245 16 33 129 146 80 195 36 51 52 178 48 178 113 245 49 67 130 148 112 245 50 49 69 130 150 130 151 242 132 152 245 48 80 130 153 247 51 50 48 130 154 246 52 90 245 75 50 129 156 130 157 242 245 241 )
#(List new values 100 quo: 100 rem: add: with:pad:do: = add: LargePositive asByteArray new: )
LargePositive asFloat
#(80 129 144 112 245 16 193 16 48 65 130 146 49 178 112 242 130 147 245 48 242 245 241 )
#(asFloat 100 * reverseDo: )
LargePositive compareToLP:
#(80 112 245 16 33 129 144 80 193 30 49 50 130 145 247 28 49 50 176 248 24 66 246 25 81 112 246 29 90 242 132 147 245 48 242 245 241 )
#(values = -1 with:pad:do: )
LargePositive multByLP:
#(64 129 145 112 245 16 196 26 66 48 80 130 147 130 148 33 52 130 149 178 129 150 129 151 112 242 130 152 245 73 48 129 154 130 155 242 245 241 )
#(List new LargePositive addFirst: new: * values asList reverseDo: LargePositive asByteArray new: )
LargePositive multBySmallInt:
#(33 80 176 248 16 32 33 129 144 130 145 129 146 242 246 17 90 245 80 112 245 67 129 148 113 245 16 194 51 50 33 130 149 48 178 112 245 49 48 70 130 151 130 152 245 48 73 130 154 112 242 130 155 245 48 80 130 156 248 78 49 48 77 130 158 130 159 245 48 4 16 130 9 17 112 245 246 54 90 245 4 18 49 129 9 19 130 9 20 242 245 241 )
#(negated multBySmallInt: negated List new * 100 rem: add: 100 quo: do: > 100 rem: add: 100 quo: LargePositive asByteArray new: )
LargePositive negated
#(64 16 130 145 242 245 241 )
#(LargeNegative new: )
LargePositive printString
#(16 64 192 15 65 49 129 146 178 82 130 147 48 178 242 131 148 242 245 241 )
#( 00 printString last: inject:into: )
LargePositive subtractFromLP:
#(80 112 245 64 129 145 113 245 33 129 146 16 80 194 46 50 48 130 147 114 245 50 51 176 248 35 50 68 178 114 245 81 112 246 37 80 112 245 49 50 51 130 149 130 150 242 132 151 245 72 49 129 153 130 154 242 245 241 )
#(List new values - 100 - add: with:pad:do: LargePositive asByteArray new: )
LargePositive values
#(16 242 245 241 )
#()
List add:
#(17 16 129 144 130 145 248 13 32 129 146 246 14 90 245 17 81 178 97 245 16 17 33 131 147 245 241 )
#(size = reallocate at:put: )
List addFirst:
#(32 33 81 131 144 245 241 )
#(insert:at: )
List at:ifAbsent:
#(16 33 130 144 248 13 16 33 34 131 145 246 16 34 129 146 242 245 241 )
#(includesKey: at:ifAbsent: value )
List at:put:
#(16 33 130 144 248 13 16 33 34 131 145 246 17 32 66 130 147 245 241 )
#(includesKey: at:put: Index error error: )
List insert:at:
#(34 81 176 247 13 34 17 81 178 130 144 246 14 91 248 22 32 65 130 146 246 23 90 245 17 16 129 147 130 148 248 37 32 129 149 246 38 90 245 34 17 130 150 192 56 16 48 81 178 16 48 130 151 131 152 242 130 153 245 17 81 178 97 245 16 34 33 131 154 245 241 )
#(> invalid index for insert:at: error: size = reallocate to: at: at:put: reverseDo: at:put: )
List printString
#(32 129 144 129 145 32 129 251 2 178 242 245 241 )
#(class name printString )
List reallocate
#(64 82 16 129 145 130 146 130 147 112 245 81 16 129 148 193 26 48 49 16 49 130 149 131 150 242 131 151 245 48 96 245 241 )
#(Array size * new: size at: at:put: to:do: )
List remove:
#(32 33 192 6 90 242 131 144 245 241 )
#(remove:ifAbsent: )
List remove:ifAbsent:
#(32 32 33 192 10 34 129 144 243 242 131 145 130 146 245 241 )
#(value indexOf:ifAbsent: removeAt: )
List removeAt:
#(33 81 17 131 144 247 13 32 65 130 146 246 14 90 245 17 81 130 147 97 245 33 17 192 36 16 48 16 48 81 178 130 148 131 149 242 131 150 245 241 )
#(between:and: invalid index for removeAt: error: - at: at:put: to:do: )
List size
#(17 242 245 241 )
#()
Magnitude <=
#(32 33 176 247 11 32 33 130 144 246 12 91 242 245 241 )
#(= )
Magnitude >
#(33 32 176 242 245 241 )
#()
Magnitude >=
#(32 33 130 144 247 12 32 33 130 145 246 13 91 242 245 241 )
#(> = )
Magnitude between:and:
#(33 32 177 248 10 32 34 177 246 11 92 242 245 241 )
#()
Magnitude max:
#(32 33 176 248 8 33 246 9 32 242 245 241 )
#()
Magnitude min:
#(32 33 176 248 8 32 246 9 33 242 245 241 )
#()
Method byteCodes
#(17 242 245 241 )
#()
Method literals
#(18 242 245 241 )
#()
Method name
#(16 242 245 241 )
#()
Method printString
#(16 242 245 241 )
#()
Method stackSize
#(19 242 245 241 )
#()
Method tempSize
#(20 242 245 241 )
#()
Method text
#(22 242 245 241 )
#()
Number abs
#(32 129 144 248 10 32 129 145 246 11 32 242 245 241 )
#(negative negated )
Number addToFloat:
#(33 32 129 144 178 242 245 241 )
#(asFloat )
Number addToFraction:
#(33 129 144 32 129 145 178 242 245 241 )
#(asFloat asFloat )
Number addToSmallInt:
#(33 129 144 32 178 242 245 241 )
#(asFloat )
Number divideByFloat:
#(33 32 129 144 130 145 242 245 241 )
#(asFloat / )
Number divideBySmallInt:
#(33 129 144 32 130 145 242 245 241 )
#(asFloat / )
Number equalToFloat:
#(33 32 129 144 130 145 242 245 241 )
#(asFloat = )
Number lessThanFloat:
#(33 32 129 144 176 242 245 241 )
#(asFloat )
Number multByFloat:
#(33 32 129 144 130 145 242 245 241 )
#(asFloat * )
Number multBySmallInt:
#(33 129 144 32 130 145 242 245 241 )
#(asFloat * )
Number negated
#(80 32 130 144 242 245 241 )
#(- )
Number negative
#(32 80 176 242 245 241 )
#()
Number subtractFromFloat:
#(33 32 129 144 130 145 242 245 241 )
#(asFloat - )
Number subtractFromSmallInt:
#(33 129 144 32 130 145 242 245 241 )
#(asFloat - )
Object =
#(32 33 130 144 242 245 241 )
#(== )
Object ==
#(32 33 210 1 242 245 241 )
#()
Object class
#(32 209 2 242 245 241 )
#()
Object error:
#(33 64 129 145 129 146 178 67 129 148 129 149 178 129 150 245 71 129 152 245 241 )
#(Char newline asString Context current backtrace log Object halt )
Object isKindOf:
#(32 129 144 112 245 48 161 248 28 48 33 130 145 248 19 91 242 246 20 90 245 48 129 146 112 245 246 5 90 245 92 242 245 241 )
#(class == superclass )
Object isMemberOf:
#(32 129 144 33 130 145 242 245 241 )
#(class == )
Object isNil
#(92 242 245 241 )
#()
Object log
#(32 129 144 209 99 245 241 )
#(printString )
Object notNil
#(91 242 245 241 )
#()
Object printString
#(32 129 144 129 145 242 245 241 )
#(class printString )
Object respondsTo:
#(32 129 144 129 145 192 14 48 129 146 33 130 147 242 130 148 242 245 241 )
#(class allMethods name = includesTest: )
Object ~=
#(32 33 130 144 129 145 242 245 241 )
#(= not )
Ordered add:
#(32 33 130 251 0 245 82 17 130 145 192 45 18 33 16 48 81 130 146 130 147 131 148 248 38 16 48 16 48 81 130 149 130 150 131 151 246 44 16 48 33 131 152 243 242 130 153 245 16 81 33 131 154 245 241 )
#(add: to: - at: value:value: - at: at:put: at:put: reverseDo: at:put: )
Ordered at:put:
#(32 64 130 145 245 241 )
#(Cannot insert into ordered collection using at: error: )
Ordered insert:at:
#(32 64 130 145 245 241 )
#(Cannot insert into ordered collection using insert: error: )
Point +
#(16 33 129 144 178 17 33 129 145 178 130 146 242 245 241 )
#(x y @ )
Point printString
#(16 129 144 65 178 17 129 146 178 242 245 241 )
#(printString @ printString )
Point x
#(16 242 245 241 )
#()
Point x:
#(33 96 245 241 )
#()
Point x:y:
#(33 96 245 34 97 245 241 )
#()
Point y
#(17 242 245 241 )
#()
Point y:
#(33 97 245 241 )
#()
SmallInt *
#(33 32 130 144 242 245 241 )
#(multBySmallInt: )
SmallInt +
#(33 32 130 144 242 245 241 )
#(addToSmallInt: )
SmallInt -
#(33 32 130 144 242 245 241 )
#(subtractFromSmallInt: )
SmallInt <
#(33 32 130 144 242 245 241 )
#(lessThanSmallInt: )
SmallInt =
#(33 32 130 144 242 245 241 )
#(equalToSmallInt: )
SmallInt addToLP:
#(33 32 129 144 178 242 245 241 )
#(asLargeInteger )
SmallInt addToSmallInt:
#(33 129 144 32 129 145 178 242 245 241 )
#(asLargeInteger asLargeInteger )
SmallInt asFloat
#(64 32 210 50 242 245 241 )
#(Float )
SmallInt asLargeInteger
#(64 129 145 112 245 32 129 146 113 245 49 80 130 147 248 32 48 49 68 130 149 130 150 245 49 71 130 152 113 245 246 10 90 245 48 129 153 80 130 154 248 48 48 80 130 155 246 49 90 245 32 80 176 248 63 76 48 129 157 130 158 246 71 79 48 129 9 16 130 9 17 242 245 241 )
#(List new abs > 100 rem: add: 100 quo: size = add: LargeNegative asByteArray new: LargePositive asByteArray new: )
SmallInt compareToLP:
#(32 129 144 33 130 145 242 245 241 )
#(asLargeInteger compareToLP: )
SmallInt equalToSmallInt:
#(32 33 210 14 242 245 241 )
#()
SmallInt lessThanSmallInt:
#(33 32 210 13 242 245 241 )
#()
SmallInt multByLP:
#(32 33 130 144 242 245 241 )
#(* )
SmallInt multBySmallInt:
#(33 32 210 15 112 245 48 160 248 21 33 129 144 32 129 145 130 146 112 246 22 90 245 48 242 245 241 )
#(asLargeInteger asLargeInteger * )
SmallInt printString
#(32 80 176 248 15 64 32 129 145 129 146 178 242 246 16 90 245 32 67 176 248 33 68 32 69 178 130 150 129 151 242 246 47 32 72 130 153 129 154 32 75 130 156 129 157 178 242 245 241 )
#(- negated printString 10 Char 48 new: asString 10 quo: printString 10 rem: printString )
SmallInt quo:
#(80 33 130 144 248 13 32 65 130 146 242 246 14 90 245 33 32 130 147 242 245 241 )
#(= division by zero error: quoWithSmallInt: )
SmallInt quoWithSmallInt:
#(33 32 210 11 242 245 241 )
#()
SmallInt rem:
#(80 33 130 144 248 13 32 65 130 146 242 246 14 90 245 33 32 130 147 242 245 241 )
#(= division by zero error: remWithSmallInt: )
SmallInt remWithSmallInt:
#(33 32 210 12 242 245 241 )
#()
SmallInt sleep
#(32 209 33 245 241 )
#()
SmallInt subtractFromLP:
#(33 32 129 144 130 145 242 245 241 )
#(asLargeInteger - )
SmallInt subtractFromSmallInt:
#(33 32 210 16 112 245 48 160 248 21 33 129 144 32 129 145 130 146 112 246 22 90 245 48 242 245 241 )
#(asLargeInteger asLargeInteger - )
SmallInt to:
#(64 32 33 81 132 145 242 245 241 )
#(Interval from:to:by: )
SmallInt to:by:
#(64 32 33 34 132 145 242 245 241 )
#(Interval from:to:by: )
SmallInt to:do:
#(32 112 245 48 33 177 248 20 34 48 130 144 245 48 81 178 112 245 246 3 90 245 241 )
#(value: )
String +
#(33 129 144 32 210 24 242 245 241 )
#(printString )
String <
#(32 33 129 144 210 26 80 176 242 245 241 )
#(printString )
String =
#(32 33 129 144 210 26 80 130 145 242 245 241 )
#(printString = )
String at:ifAbsent:
#(32 33 130 144 248 16 65 32 33 210 21 130 146 242 246 20 34 129 147 242 245 241 )
#(includesKey: Char new: value )
String at:put:
#(32 33 130 144 248 15 34 129 145 32 33 211 22 246 19 32 66 130 147 245 241 )
#(includesKey: value string indexing error error: )
String break
#(32 64 130 145 129 146 242 245 241 )
#(  break: asArray )
String break:
#(64 113 245 65 129 146 112 245 32 194 44 33 50 130 147 248 37 49 129 148 80 130 149 248 34 48 49 130 150 245 71 113 246 35 90 246 43 49 50 129 152 178 113 242 130 153 245 49 129 154 80 130 155 248 61 48 49 130 156 246 62 90 245 48 242 245 241 )
#( List new includes: size > add:  asString do: size > add: )
String copy
#(32 64 210 23 242 245 241 )
#(String )
String doIt
#(64 65 32 178 130 146 112 245 48 161 248 25 67 129 148 48 69 81 130 150 131 151 242 246 26 90 245 241 )
#(Object doItCommand ^ parseMethod: Context new Array new: perform:withArguments: )
String find:
#(81 32 129 144 33 129 145 130 146 81 178 192 31 32 48 33 129 147 131 148 33 130 149 248 29 48 243 246 30 90 242 131 150 245 90 242 245 241 )
#(size size - size from:size: = to:do: )
String last:
#(32 32 129 144 33 130 145 81 178 32 129 146 131 147 242 245 241 )
#(size - size from:to: )
String printString
#(32 242 245 241 )
#()
String size
#(32 209 4 242 245 241 )
#()
True and:
#(33 129 144 242 245 241 )
#(value )
True ifTrue:ifFalse:
#(33 129 144 242 245 241 )
#(value )
True not
#(92 242 245 241 )
#()
True printString
#(64 242 245 241 )
#(true )
True or:
#(91 242 245 241 )
#()
Undefined isNil
#(91 242 245 241 )
#()
Undefined notNil
#(92 242 245 241 )
#()
Undefined printString
#(64 242 245 241 )
#(nil )
Undefined version
#(64 242 245 241 )
#(image version 0.82 )
SmallInteger 1
